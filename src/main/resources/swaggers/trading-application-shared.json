{
  "swagger":"2.0",
  "info":{
    "description":"A Spring Rest API",
    "version":"v1.0",
    "title":"Jarvis Trading Rest Application",
    "contact":{
      "name":"Zhen Zhang",
      "url":"jrvs.ca",
      "email":"zhenzhang1030@gmail.ca"
    }
  },
  "host":"localhost:9081",
  "basePath":"/",
  "tags":[
    {
      "name":"app-controller",
      "description":"App Controller"
    },
    {
      "name":"dashboard-controller",
      "description":"Dashboard Controller"
    },
    {
      "name":"order-controller",
      "description":"Order Controller"
    },
    {
      "name":"quote-controller",
      "description":"Quote Controller"
    },
    {
      "name":"trader-controller",
      "description":"Trader Controller"
    }
  ],
  "paths":{
    "/api/v1/trading/dashboard/portfolio/traderId/{traderId}":{
      "get":{
        "tags":[
          "dashboard-controller"
        ],
        "summary":"Show portfolio by trader ID",
        "description":"Show portfolio by trader ID.",
        "operationId":"getPortfolioByIdUsingGET",
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"traderId",
            "in":"path",
            "description":"Trader ID",
            "required":false,
            "type":"integer",
            "format":"int32"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/PortfolioResponse"
            }
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/dashboard/profile/traderId/{traderId}":{
      "get":{
        "tags":[
          "dashboard-controller"
        ],
        "summary":"Show trader's profile by trader ID",
        "description":"Show trader's profile by trader ID.",
        "operationId":"getTraderProfileByIdUsingGET",
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"traderId",
            "in":"path",
            "description":"Trader ID",
            "required":false,
            "type":"integer",
            "format":"int32"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/TraderProfileResponse"
            }
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/health":{
      "get":{
        "tags":[
          "app-controller"
        ],
        "summary":"Test if the trading app is successfully running",
        "description":"Test if the trading app is successfully running.",
        "operationId":"healthUsingGET",
        "produces":[
          "*/*"
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "type":"string"
            }
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/order/marketOrder":{
      "post":{
        "tags":[
          "order-controller"
        ],
        "summary":"Submit a market order",
        "description":"Submit a market order, then return the result securityOrder.",
        "operationId":"addMarketOrderUsingPOST",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"req",
            "description":"MarketOrderRequest, BUY with positive size value, SELL with negative size value",
            "required":false,
            "schema":{
              "$ref":"#/definitions/MarketOrderRequest"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/PortfolioResponse"
            }
          },
          "201":{
            "description":"Created"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"AccountId or Ticker is invalid."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/quote/":{
      "put":{
        "tags":[
          "quote-controller"
        ],
        "summary":"Update a given quote in the quote table",
        "description":"Manually update a quote in the quote table for testing purpose",
        "operationId":"putQuoteUsingPUT",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"req",
            "description":"Quote request",
            "required":false,
            "schema":{
              "$ref":"#/definitions/QuoteRequest"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/QuoteResponse"
            }
          },
          "201":{
            "description":"Created"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/quote/dailyList":{
      "get":{
        "tags":[
          "quote-controller"
        ],
        "summary":"Show the dailyList",
        "description":"Show dailyList for this trading system",
        "operationId":"getDailyListUsingGET",
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/QuoteResponse"
              }
            }
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/quote/iex/ticker/{ticker}":{
      "get":{
        "tags":[
          "quote-controller"
        ],
        "summary":"Show iexQuote",
        "description":"Show iexQuote for a given ticker or symbol",
        "operationId":"getQuoteUsingGET",
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"ticker",
            "in":"path",
            "description":"Ticker",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/IexQuoteResponse"
            }
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/quote/iexMarketData":{
      "put":{
        "tags":[
          "quote-controller"
        ],
        "summary":"Update quote table using iex data",
        "description":"Update all quotes in the quote table. Use IEX trading API as market data source",
        "operationId":"updateMarketDataUsingPUT",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/QuoteResponse"
              }
            }
          },
          "201":{
            "description":"Created"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/quote/tickerId/{tickerId}":{
      "post":{
        "tags":[
          "quote-controller"
        ],
        "summary":"Add a ticker to dailyList(quote table)",
        "description":"Init a new ticker in the dailyList",
        "operationId":"createQuoteUsingPOST",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"tickerId",
            "in":"path",
            "description":"Ticker Id",
            "required":false,
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully."
          },
          "201":{
            "description":"Created"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/trader/":{
      "post":{
        "tags":[
          "trader-controller"
        ],
        "summary":"Create a trader and an account",
        "description":"TraderId and AccountId are auto generated by the database, and they should be identical. Assume each trader has exact one account.",
        "operationId":"createTraderAndAccountUsingPOST",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "in":"body",
            "name":"req",
            "description":"Trader Request",
            "required":false,
            "schema":{
              "$ref":"#/definitions/TraderRequest"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/TraderProfileResponse"
            }
          },
          "201":{
            "description":"Created"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"Not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/trader/deposit/traderId/{traderId}/amount/{amount}":{
      "put":{
        "tags":[
          "trader-controller"
        ],
        "summary":"Deposit a fund",
        "description":"Deposit a fund to the account that associates with the given traderId. Deposit amount must be greater than 0.",
        "operationId":"depositFundUsingPUT",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"amount",
            "in":"path",
            "description":"Fund amount",
            "required":false,
            "type":"number",
            "format":"double"
          },
          {
            "name":"traderId",
            "in":"path",
            "description":"Trader ID",
            "required":false,
            "type":"integer",
            "format":"int32"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/AccountResponse"
            }
          },
          "201":{
            "description":"Created"
          },
          "400":{
            "description":"Unable to deposit due to user input"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"TraderId is not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/trader/traderId/{traderId}":{
      "delete":{
        "tags":[
          "trader-controller"
        ],
        "summary":"Delete a trader",
        "description":"Delete a trader IFF its account amount is 0 and no open positions. Also delete the associated account and securityOrders.",
        "operationId":"deleteTraderUsingDELETE",
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"traderId",
            "in":"path",
            "description":"Trader ID",
            "required":false,
            "type":"integer",
            "format":"int32"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "type":"object"
            }
          },
          "204":{
            "description":"No Content"
          },
          "400":{
            "description":"Unable to delete the trader."
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    },
    "/api/v1/trading/trader/withdraw/traderId/{traderId}/amount/{amount}":{
      "put":{
        "tags":[
          "trader-controller"
        ],
        "summary":"Withdraw a fund",
        "description":"Withdraw a fund from the account that associates with the given traderId. Withdraw amount must not exceed account amount.",
        "operationId":"withdrawFundUsingPUT",
        "consumes":[
          "application/json"
        ],
        "produces":[
          "application/json;charset=UTF-8"
        ],
        "parameters":[
          {
            "name":"amount",
            "in":"path",
            "description":"Fund amount",
            "required":false,
            "type":"number",
            "format":"double"
          },
          {
            "name":"traderId",
            "in":"path",
            "description":"Trader ID",
            "required":false,
            "type":"integer",
            "format":"int32"
          }
        ],
        "responses":{
          "200":{
            "description":"Request completes successfully.",
            "schema":{
              "$ref":"#/definitions/AccountResponse"
            }
          },
          "201":{
            "description":"Created"
          },
          "400":{
            "description":"Unable to withdraw due to user input (e.g. insufficient funds)"
          },
          "401":{
            "description":"Unauthorized"
          },
          "403":{
            "description":"Forbidden"
          },
          "404":{
            "description":"TraderId is not found."
          },
          "500":{
            "description":"Internal Server Error."
          }
        },
        "deprecated":false
      }
    }
  },
  "definitions":{
    "Account":{
      "type":"object",
      "properties":{
        "amount":{
          "type":"number",
          "format":"double"
        },
        "id":{
          "type":"integer",
          "format":"int32"
        },
        "traderId":{
          "type":"integer",
          "format":"int32"
        }
      },
      "title":"Account"
    },
    "AccountResponse":{
      "type":"object",
      "properties":{
        "amount":{
          "type":"number",
          "format":"double"
        },
        "id":{
          "type":"integer",
          "format":"int32"
        },
        "traderId":{
          "type":"integer",
          "format":"int32"
        }
      },
      "title":"AccountResponse"
    },
    "IexQuoteResponse":{
      "type":"object",
      "properties":{
        "avgTotalVolume":{
          "type":"string"
        },
        "calculationPrice":{
          "type":"string"
        },
        "change":{
          "type":"string"
        },
        "changePercent":{
          "type":"string"
        },
        "close":{
          "type":"string"
        },
        "closeTime":{
          "type":"string"
        },
        "companyName":{
          "type":"string"
        },
        "delayedPrice":{
          "type":"string"
        },
        "delayedPriceTime":{
          "type":"string"
        },
        "extendedChange":{
          "type":"string"
        },
        "extendedChangePercent":{
          "type":"string"
        },
        "extendedPrice":{
          "type":"string"
        },
        "extendedPriceTime":{
          "type":"string"
        },
        "high":{
          "type":"string"
        },
        "iexAskPrice":{
          "type":"string"
        },
        "iexAskSize":{
          "type":"string"
        },
        "iexBidPrice":{
          "type":"string"
        },
        "iexBidSize":{
          "type":"string"
        },
        "iexLastUpdated":{
          "type":"string"
        },
        "iexMarketPercent":{
          "type":"string"
        },
        "iexRealtimePrice":{
          "type":"string"
        },
        "iexRealtimeSize":{
          "type":"string"
        },
        "iexVolume":{
          "type":"string"
        },
        "latestPrice":{
          "type":"string"
        },
        "latestSource":{
          "type":"string"
        },
        "latestTime":{
          "type":"string"
        },
        "latestUpdate":{
          "type":"string"
        },
        "latestVolume":{
          "type":"string"
        },
        "low":{
          "type":"string"
        },
        "marketCap":{
          "type":"string"
        },
        "open":{
          "type":"string"
        },
        "openTime":{
          "type":"string"
        },
        "peRatio":{
          "type":"string"
        },
        "previousClose":{
          "type":"string"
        },
        "primaryExchange":{
          "type":"string"
        },
        "sector":{
          "type":"string"
        },
        "symbol":{
          "type":"string"
        },
        "week52High":{
          "type":"string"
        },
        "week52Low":{
          "type":"string"
        },
        "ytdChange":{
          "type":"string"
        }
      },
      "title":"IexQuoteResponse"
    },
    "MarketOrderRequest":{
      "type":"object",
      "properties":{
        "accountId":{
          "type":"integer",
          "format":"int32"
        },
        "notes":{
          "type":"string"
        },
        "size":{
          "type":"integer",
          "format":"int32"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"MarketOrderRequest"
    },
    "PortfolioResponse":{
      "type":"object",
      "properties":{
        "securityRows":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/SecurityRow"
          }
        }
      },
      "title":"PortfolioResponse"
    },
    "Position":{
      "type":"object",
      "properties":{
        "accountId":{
          "type":"integer",
          "format":"int32"
        },
        "position":{
          "type":"integer",
          "format":"int64"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"Position"
    },
    "Quote":{
      "type":"object",
      "properties":{
        "askPrice":{
          "type":"number",
          "format":"double"
        },
        "askSize":{
          "type":"integer",
          "format":"int32"
        },
        "bidPrice":{
          "type":"number",
          "format":"double"
        },
        "bidSize":{
          "type":"integer",
          "format":"int32"
        },
        "lastPrice":{
          "type":"number",
          "format":"double"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"Quote"
    },
    "QuoteRequest":{
      "type":"object",
      "properties":{
        "askPrice":{
          "type":"number",
          "format":"double"
        },
        "askSize":{
          "type":"integer",
          "format":"int32"
        },
        "bidPrice":{
          "type":"number",
          "format":"double"
        },
        "bidSize":{
          "type":"integer",
          "format":"int32"
        },
        "lastPrice":{
          "type":"number",
          "format":"double"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"QuoteRequest"
    },
    "QuoteResponse":{
      "type":"object",
      "properties":{
        "askPrice":{
          "type":"number",
          "format":"double"
        },
        "askSize":{
          "type":"integer",
          "format":"int32"
        },
        "bidPrice":{
          "type":"number",
          "format":"double"
        },
        "bidSize":{
          "type":"integer",
          "format":"int32"
        },
        "lastPrice":{
          "type":"number",
          "format":"double"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"QuoteResponse"
    },
    "SecurityRow":{
      "type":"object",
      "properties":{
        "position":{
          "$ref":"#/definitions/Position"
        },
        "quote":{
          "$ref":"#/definitions/Quote"
        },
        "ticker":{
          "type":"string"
        }
      },
      "title":"SecurityRow"
    },
    "Trader":{
      "type":"object",
      "properties":{
        "country":{
          "type":"string"
        },
        "dob":{
          "type":"string",
          "example":"yyyy-MM-dd"
        },
        "email":{
          "type":"string"
        },
        "firstName":{
          "type":"string"
        },
        "id":{
          "type":"integer",
          "format":"int32"
        },
        "lastName":{
          "type":"string"
        }
      },
      "title":"Trader"
    },
    "TraderProfileResponse":{
      "type":"object",
      "properties":{
        "account":{
          "$ref":"#/definitions/Account"
        },
        "trader":{
          "$ref":"#/definitions/Trader"
        }
      },
      "title":"TraderProfileResponse"
    },
    "TraderRequest":{
      "type":"object",
      "properties":{
        "country":{
          "type":"string"
        },
        "dob":{
          "type":"string",
          "example":"yyyy-MM-dd"
        },
        "email":{
          "type":"string"
        },
        "firstName":{
          "type":"string"
        },
        "lastName":{
          "type":"string"
        }
      },
      "title":"TraderRequest"
    }
  }
}